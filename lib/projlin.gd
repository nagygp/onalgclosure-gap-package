#############################################################################
# This file contains another implementation of the projective linear transformations over a finite fields. 
#
# Gabor P. Nagy (http://www.math.u-szeged.hu/~nagyg), 07/06/2017


DeclareCategory( "IsAC_ProjectiveLinearTransformation", IsMultiplicativeElementWithInverse );
DeclareRepresentation( "IsAC_ProjectiveLinearTransformationRep", IsPositionalObjectRep and IsMultiplicativeElement, [1] );
AC_ProjectiveLinearTransformationFamily:=NewFamily("AC_ProjectiveLinearTransformationFam");

#! @Chapter Usage
#! @Section Functions for AC-projective linear transformations
#! @Arguments M
#! @Returns an AC-projective linear transformation
#! @Description
#!  Creates the projective linear transformation $\varphi$ corresponding to the $n\times n$ matrix <A>M</A>. 
#!  Here, <A>M</A> is a nonsingular matrix over the finite field <C>GF(q)</C>. By definition $\varphi$ acts
#!  via <C>OnLines</C> on row vectors of length $n$ with entries from the algebraic closure of <C>GF(q)</C>. 
DeclareGlobalFunction("AC_ProjectiveLinearTransformation");

#! @InsertChunk AC_ProjectiveLinearTransformation_example1

#!  AC-projective linear transformations of the same characteristic and dimension can be multiplied, 
#!  possess an inverse AC-projective linear transformation and share a unique multiplicative identity. 
#!  <P/>AC-proejctive linear transformations defined over <C>GF(q)</C> have a regular permutation action
#!  on $PG(n-1,q)$. Via nice monomorphism, $\varphi$ knows this permutation. This enables efficient 
#!  arithmetics for groups generated by AC-projective linear transformations. 
#!  <P/>It must be easy to implement other actions of AC-projective linear transformations on GAP objects.  

#! @InsertChunk AC_ProjectiveLinearTransformation_example2

#! @Arguments matgr,orb
#! @Returns a projective linear cycle
#! @Description
#!  Creates the AC-projective linear transformation group $G$ corresponding to the matrix group <A>matgr</A>.
#!  <C>matgr</C> must have a faithful action on the orbit <A>orb</A>. This permutation action is stored as
#!  nice monomorphism of $G$. 
DeclareGlobalFunction( "AC_ProjectiveTransformationGroupWithShortOrbit" );

